/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package engtelecom.poo;

import engtelecom.poo.configuracoes.Configuracoes;
import engtelecom.poo.configuracoes.PacoteIP;
import engtelecom.poo.dispositivos.Comutador;
import engtelecom.poo.dispositivos.Firewall;
import engtelecom.poo.dispositivos.Roteador;
import org.checkerframework.checker.units.qual.C;

import java.util.Scanner;

public class App {

    Topologia topologia = new Topologia();
    Scanner teclado = new Scanner(System.in);

    public void imprimirMenu(){
        System.out.println("┌──────────────────────────────────────┐");
        System.out.println("|          TOPOLOGIA IFSC POO          |");
        System.out.println("├──────────────────────────────────────┤");
        System.out.println("|  1 - LISTAR DISPOSITIVOS POR TIPO    |");
        System.out.println("|  2 - LISTAR DISPOSITIVOS POR REDE    |");
        System.out.println("|  3 - LISTAR ROTAS                    |");
        System.out.println("|  4 - LISTAR REGRAS DE FILTRAGEM      |");
        System.out.println("|  5 - CRIAR REGRA DE FILTRAGEM        |");
        System.out.println("|  6 - APAGAR REGRA DE FILTRAGEM       |");
        System.out.println("|  7 - SIMULAR PROCESSAMENTO DE PACOTE |");
        System.out.println("|  8 - SAIR                            |");
        System.out.println("└──────────────────────────────────────┘");
    }
    public void listarDispositivosPorTipo(){
        System.out.println("┌──────────────────────────────────────┐");
        System.out.println("|         DISPOSITIVOS POR TIPO        |");
        System.out.println("└──────────────────────────────────────┘");
        System.out.println("┌──────────────────────────────────────┐");
        for (int i = 0; i < topologia.getDispositivos().size(); i++) {
            if(topologia.getDispositivos().get(i) instanceof Comutador){
                System.out.println("|              COMUTADOR               |");
                System.out.println("├──────────────────────────────────────┤");
                System.out.println("|             COMUTADOR " + i + "              |");
            }else if(topologia.getDispositivos().get(i) instanceof Roteador){
                System.out.println("┌──────────────────────────────────────┐");
                System.out.println("|               ROTEADOR               |");
            }else{
                System.out.println("┌──────────────────────────────────────┐");
                System.out.println("|               FIREWALL               |");
            }
            System.out.println("├──────────────────────────────────────┤");
            System.out.println("|  ENDEREÇO MAC: " + topologia.getDispositivos().get(i).getEnderecoMac() + "                    |");
            System.out.println("|  ENDEREÇO IP: " + topologia.getDispositivos().get(i).getEnderecoIp() + "                   |");
            System.out.println("└──────────────────────────────────────┘");
        }
        System.out.print("\n");
    }
    public void listarDispositivosPorRede(){
        System.out.println("┌──────────────────────────────────────┐");
        System.out.println("|         DISPOSITIVOS POR REDE        |");
        System.out.println("└──────────────────────────────────────┘");
        for (int i = 0; i < topologia.getDispositivos().size() - 1; i++) {
            System.out.println("┌──────────────────────────────────────┐");
            System.out.println("|                REDE " + (i + 1) + "                |");
            System.out.println("├──────────────────────────────────────┤");
            if(topologia.getDispositivos().get(i) instanceof Comutador){
                System.out.println("|             COMUTADOR " + (i + 1) + "              |");
                System.out.println("|  ENDEREÇO MAC: " + topologia.getDispositivos().get(i).getEnderecoMac() + "                    |");
                System.out.println("|  ENDEREÇO IP: " + topologia.getDispositivos().get(i).getEnderecoIp() + "                   |");
                for(int j = 0; j < ((Comutador) topologia.getDispositivos().get(i)).getPortas().size() - 1; j++){
                    System.out.println("├──────────────────────────────────────┤");
                    System.out.println("|             COMPUTADOR " + (j + 1) + "             |");
                    System.out.println("|  ENDEREÇO MAC: " + ((Comutador) topologia.getDispositivos().get(i)).getPortas().get(j).getEnderecoMac() + "                    |");
                    System.out.println("|  ENDEREÇO IP: " + ((Comutador) topologia.getDispositivos().get(i)).getPortas().get(j).getEnderecoIp() + "                   |");
                }
                System.out.println("└──────────────────────────────────────┘");
            }else {
                System.out.println("|               ROTEADOR               |");
                System.out.println("├──────────────────────────────────────┤");
                System.out.println("|  ENDEREÇO MAC: " + topologia.getDispositivos().get(i).getEnderecoMac() + "                    |");
                System.out.println("|  ENDEREÇO IP: " + topologia.getDispositivos().get(i).getEnderecoIp() + "                   |");
                System.out.println("├──────────────────────────────────────┤");
                System.out.println("|               FIREWALL               |");
                System.out.println("├──────────────────────────────────────┤");
                System.out.println("|  ENDEREÇO MAC: " + topologia.getDispositivos().get(i + 1).getEnderecoMac() + "                    |");
                System.out.println("|  ENDEREÇO IP: " + topologia.getDispositivos().get(i + 1).getEnderecoIp() + "                   |");

            }
        }
        System.out.println("└──────────────────────────────────────┘");
        System.out.print("\n");

    }
    public void listarTabelaDeRotas(){
        Roteador aux = (Roteador) topologia.getDispositivos().get(2);
        System.out.println("┌──────────────────────────────────────────────────────────┐");
        System.out.println("|                     TABELA DE ROTAS                      |");
        System.out.println("└──────────────────────────────────────────────────────────┘");
        System.out.println("┌──────────────────────────────────────────────────────────┐");
        System.out.println("|       ROTA        | ENDEREÇO DE REDE  |       PORTA      |");
        for (int i = 0; i < aux.getRotas().size()  ; i++) {
            System.out.println("├──────────────────────────────────────────────────────────┤");
            System.out.println("|         "+ (i + 1) + "         |         " + aux.getRotas().get(i).getId() + "         |         " + aux.getRotas().get(i).getPortaAssociada() + "        |");
        }
        System.out.println("└──────────────────────────────────────────────────────────┘");
        System.out.println("(0 DEFAULT)");
        System.out.print("\n");
    }
    public void listarRegrasDeFiltragem(){
        Firewall aux = (Firewall) topologia.getDispositivos().get(3);
        System.out.println("┌──────────────────────────────────────────────────────────────────────────────────────────────────────┐");
        System.out.println("|                                          REGRAS DE FILTRAGEM                                         |");
        System.out.println("└──────────────────────────────────────────────────────────────────────────────────────────────────────┘");
        System.out.println("┌──────────────────────────────────────────────────────────────────────────────────────────────────────┐");
        System.out.println("| ÍNDICE | IP DE ORIGEM | PORTA DE ORIGEM | IP DE DESTINO | PORTA DE DESTINO |           AÇÃO          |");
        for (int i = 0; i < aux.getRegrasDeFiltragem().size(); i++) {
            System.out.println("├──────────────────────────────────────────────────────────────────────────────────────────────────────┤");
            System.out.println("|   " + i + "    |     " + aux.getRegrasDeFiltragem().get(i).getConfiguracoesRegra().getEnderecoIpOrigem() +
                    "     |        " + aux.getRegrasDeFiltragem().get(i).getConfiguracoesRegra().getPortaDeOrigem() + "        |      " +
                    aux.getRegrasDeFiltragem().get(i).getConfiguracoesRegra().getEnderecoIpDestino() + "     |        " +
                    aux.getRegrasDeFiltragem().get(i).getConfiguracoesRegra().getPortaDeDestino()+ "         | " + aux.getRegrasDeFiltragem().get(i).getAcao());
        }
        System.out.println("└──────────────────────────────────────────────────────────────────────────────────────────────────────┘");
        System.out.print("\n");

    }

    public void criarRegrasDeFiltragem(){
        String auxIpOrigem;
        String auxIpDestino;
        int auxPortaOrigem;
        int auxPortaDestino;
        String auxAcao;
        teclado.nextLine();
        System.out.println("┌──────────────────────────────────────┐");
        System.out.println("|       CRIAR  REGRA DE FILTRAGEM      |");
        System.out.println("└──────────────────────────────────────┘");

        System.out.print("Entre com o IP de ORIGEM: ");
        auxIpOrigem = teclado.nextLine();
        if(!verificaIp(auxIpOrigem)){
            System.out.println(mensagemErroIp());
            return;
        }

        System.out.print("Entre com a PORTA de ORIGEM: ");
        auxPortaOrigem = teclado.nextInt();
        teclado.nextLine();
        if(!verificaPorta(auxPortaOrigem)){
            System.out.println(mensagemErroPorta());
            return;
        }

        System.out.print("Entre com o IP de DESTINO: ");
        auxIpDestino = teclado.nextLine();
        if(!verificaIp(auxIpDestino)){
            System.out.println(mensagemErroIp());
            return;
        }

        System.out.print("Entre com a PORTA de DESTINO: ");
        auxPortaDestino = teclado.nextInt();
        teclado.nextLine();
        if(!verificaPorta(auxPortaDestino)){
            System.out.println(mensagemErroPorta());
            return;
        }

        System.out.print("Entre com a AÇÃO: ");
        auxAcao = teclado.nextLine();

        ((Firewall) topologia.getDispositivos().get(3)).criarRegra(auxIpOrigem,auxIpDestino,auxPortaOrigem,auxPortaDestino,auxAcao);

        System.out.print("\n");
    }
    public void apagarRegraDeFiltragem(){
        System.out.println("┌──────────────────────────────────────┐");
        System.out.println("|       CRIAR  REGRA DE FILTRAGEM      |");
        System.out.println("└──────────────────────────────────────┘");
        System.out.print("Entre com o índice da regra: ");
        int auxIndice = teclado.nextInt();
        teclado.nextLine();
        if(auxIndice < 0 || auxIndice > ((Firewall) topologia.getDispositivos().get(3)).getRegrasDeFiltragem().size() - 1){
            System.out.println("ÍNDICE NÃO ENCONTRADO!");
        }else{
            ((Firewall) topologia.getDispositivos().get(3)).apagarRegra(auxIndice);
        }
    }

    public PacoteIP gerarPacoteIp(){
        String auxIpOrigem;
        String auxIpDestino;
        int auxPortaOrigem;
        int auxPortaDestino;
        String macDestino;
        String payload;

        PacoteIP pacoteIP = null;
        teclado.nextLine();
        System.out.print("Entre com o IP de ORIGEM: ");
        auxIpOrigem = teclado.nextLine();
        if(!verificaIp(auxIpOrigem)){
            System.out.println(mensagemErroIp());
            return null;
        }

        System.out.print("Entre com a PORTA de ORIGEM: ");
        auxPortaOrigem = teclado.nextInt();
        teclado.nextLine();
        if(!verificaPorta(auxPortaOrigem)){
            System.out.println(mensagemErroPorta());
            return null;
        }

        System.out.print("Entre com o IP de DESTINO: ");
        auxIpDestino = teclado.nextLine();
        if(!verificaIp(auxIpDestino)){
            System.out.println(mensagemErroIp());
            return null;
        }

        System.out.print("Entre com a PORTA de DESTINO: ");
        auxPortaDestino = teclado.nextInt();
        teclado.nextLine();
        if(!verificaPorta(auxPortaDestino)){
            System.out.println(mensagemErroPorta());
            return null;
        }

        System.out.print("Entre com o MAC de DESTINO: ");
        macDestino = teclado.nextLine();
        if(!verificaMac(macDestino)){
            System.out.println(mensagemErroMac());
            return null;
        }

        System.out.print("Entre com o PAYLOAD: ");
        payload = teclado.nextLine();

        pacoteIP  = new PacoteIP(new Configuracoes(auxIpOrigem,auxIpDestino,auxPortaOrigem,auxPortaDestino),payload,macDestino);

        return pacoteIP;
    }
    public void processarPacoteComutador(PacoteIP pacoteIP, Comutador comutador){
        if(comutador.processarPacote(pacoteIP) == 0){
            System.out.println("ENVIANDO PACOTE\n" + "Porta: " + pacoteIP.getConfiguracoesPacoteIp().getPortaDeDestino() + "\nEndereço MAC: " + pacoteIP.getEnderecoMacDestino());
        } else if (comutador.processarPacote(pacoteIP) == 1) {
            System.out.println("Enviando pacote para todas as portas associadas!");
        } else {
            System.out.println("Pacote IP nulo! Tente novamente");
        }
    }
    public void processarPacoteRoteador(PacoteIP pacoteIP){
        if(((Roteador) topologia.getDispositivos().get(2)).processarPacote(pacoteIP) == 0){
            System.out.println("ENVIANDO PACOTE...\n" + "Porta: 5"  + "\nIP: " + pacoteIP.getConfiguracoesPacoteIp().getEnderecoIpDestino());
        }else if(((Roteador) topologia.getDispositivos().get(2)).processarPacote(pacoteIP) == 1){
            System.out.println("ENVIANDO PACOTE PARA INTERNET (DEFAULT)");
        }else{
            System.out.println("Pacote IP nulo! Tente novamente");
        }
    }
    public void processarPacoteFirewall(PacoteIP pacoteIP){
        int indice = ((Firewall) topologia.getDispositivos().get(3)).processarPacote(pacoteIP);
        if( indice == -1){
            System.out.println("DESCARTANDO PACOTE IP!");
        } else if (indice == -2) {
            System.out.println("PACOTE IP NULO! TENTE NOVAMENTE");
        }else{
            System.out.println("AÇÃO: " + ((Firewall) topologia.getDispositivos().get(3)).getRegrasDeFiltragem().get(indice).getAcao() +
                    "\nÍNDICE: " +  indice);
        }
    }
    public void processarPacote() throws InterruptedException {
        System.out.println("┌────────────────────────────────────────────┐");
        System.out.println("|       SIMULAR PROCESSAMENTO DE PACOTE      |");
        System.out.println("└────────────────────────────────────────────┘");
        PacoteIP pacoteIP = null;
        if((pacoteIP = gerarPacoteIp()) != null) {
            for (int i = 0; i < topologia.getDispositivos().size(); i++) {
                if (topologia.getDispositivos().get(i) instanceof Comutador) {
                    System.out.println("┌──────────────────────┐");
                    System.out.println("|      COMUTADOR " + (i + 1) + "     |");
                    System.out.println("└──────────────────────┘");
                    imprimirProcessando();
                    processarPacoteComutador(pacoteIP, ((Comutador) topologia.getDispositivos().get(i)));
                } else if (topologia.getDispositivos().get(i) instanceof Roteador) {
                    System.out.println("┌──────────────────────┐");
                    System.out.println("|        ROTEADOR      |");
                    System.out.println("└──────────────────────┘");
                    imprimirProcessando();
                    processarPacoteRoteador(pacoteIP);
                } else {
                    System.out.println("┌──────────────────────┐");
                    System.out.println("|        FIREWALL      |");
                    System.out.println("└──────────────────────┘");
                    imprimirProcessando();
                    processarPacoteFirewall(pacoteIP);
                }
            }
        }
    }

    public boolean verificaIp(String ip){
        if(ip.length() == 4 && ip.matches("\\d+")){
            return true;
        }else{
            return false;
        }
    }
    public boolean verificaPorta(int porta){
        if(porta > 0 && porta < 12){
            return true;
        }else{
            return false;
        }
    }
    public boolean verificaMac(String mac){
        if(mac.length() == 2) {
            if (Character.isLetter(mac.charAt(0))) {
                if (Character.isDigit(mac.charAt(1))) {
                    return true;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        }else{
            return false;
        }
    }

    public String mensagemErroIp(){
        return "FORMATO DE IP INVÁLIDO! (XXXX)";
    }
    public String mensagemErroPorta(){
        return "DIGITE UM VALOR NO INTERVALO {1...12}";
    }
    public String mensagemErroMac(){
        return "ENREÇO MAC INVÁLIDO!";
    }

    public void imprimirProcessando() throws InterruptedException {
        System.out.print("PROCESSANDO");
        for (int i = 0; i < 3; i++) {
            Thread.sleep(1000);
            System.out.print(".");
        }
        System.out.print("\n");
    }

    public static void main(String[] args) throws InterruptedException {
        App app = new App();
        int op;

        do{
            app.imprimirMenu();
            System.out.print("Entre com a opção: ");
            op = app.teclado.nextInt();

            switch (op){
                case 1: app.listarDispositivosPorTipo(); break;
                case 2: app.listarDispositivosPorRede(); break;
                case 3: app.listarTabelaDeRotas();       break;
                case 4: app.listarRegrasDeFiltragem();   break;
                case 5: app.criarRegrasDeFiltragem();    break;
                case 6: app.apagarRegraDeFiltragem();    break;
                case 7: app.processarPacote();           break;
                case 8: System.out.println("FINALIZANDO SIMULAÇÃO!"); break;
                default: System.out.println("OPÇÃO INVÁLIDA! TENTE NOVAMENTE...");
            }
        }while (op != 8);

        app.teclado.close();
    }
}
